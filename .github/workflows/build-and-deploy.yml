name: Build and Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: read
  deployments: write

concurrency:
  group: "deploy-production"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy to Production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ steps.setup-node.outputs.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-${{ steps.setup-node.outputs.node-version }}-
            ${{ runner.os }}-pnpm-

      - name: Setup Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.ts', '**/*.tsx', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "üîí Running security audit..."
          pnpm audit --audit-level high
          echo "‚úÖ Security audit completed"

      - name: Build application
        run: pnpm build
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next
          retention-days: 7

      - name: Optimize build for Cloudflare Pages
        run: |
          echo "üîß Optimizing build for Cloudflare Pages..."
          echo "Build directory size before optimization:"
          du -sh .next || true

          # Ensure server directory structure is maintained for Next.js App Router
          echo "üìÅ Maintaining server directory structure..."

          # Copy static files from public directory (maintaining structure)
          echo "üìÅ Copying public files..."
          if [ -d "public" ]; then
            cp -r public/* .next/ 2>/dev/null || true
          fi

          # Create _next/static structure for proper asset serving
          echo "üìÅ Setting up static asset structure..."
          mkdir -p .next/_next/static
          if [ -d ".next/static" ]; then
            cp -r .next/static/* .next/_next/static/ 2>/dev/null || true
          fi

          # Create proper HTML structure for static pages
          echo "üìÅ Setting up HTML files..."
          if [ -d ".next/server/app" ]; then
            # Find all .html files in server/app and copy them to appropriate locations
            find .next/server/app -name "*.html" -exec bash -c '
              file="$1"
              rel_path="${file#.next/server/app/}"
              # Create directory structure
              mkdir -p ".next/$(dirname "$rel_path")"
              # Copy HTML file
              cp "$file" ".next/$rel_path"
            ' bash {} \;
          fi

          # Copy essential server files for Next.js App Router
          echo "üìÅ Copying essential server files..."
          if [ -f ".next/server/app/page.js" ]; then
            mkdir -p .next/_nextServer
            cp -r .next/server/app/page.js* .next/_nextServer/ 2>/dev/null || true
          fi

          # Copy worker configuration files if they exist
          if [ -f "public/_worker.js" ]; then
            cp public/_worker.js .next/ 2>/dev/null || true
          fi
          if [ -f "public/_redirects" ]; then
            cp public/_redirects .next/ 2>/dev/null || true
          fi
          if [ -f "public/_headers" ]; then
            cp public/_headers .next/ 2>/dev/null || true
          fi

          # Clean up large cache files that exceed Cloudflare's size limit
          echo "üóëÔ∏è Removing large cache files..."
          find .next -name "*.pack" -size +20M -delete 2>/dev/null || true
          find .next -name "*.map" -size +5M -delete 2>/dev/null || true
          find .next -name "*.nft.json" -size +2M -delete 2>/dev/null || true
          rm -rf .next/cache 2>/dev/null || true
          rm -f .next/trace 2>/dev/null || true
          rm -rf .next/server/middleware-manifest.json 2>/dev/null || true

          # Remove development-only files
          find .next -name "*.hot-update.js" -delete 2>/dev/null || true
          find .next -name "*.hot-update.json" -delete 2>/dev/null || true

          # Ensure proper file structure for Cloudflare Pages
          echo "üìÅ Ensuring proper deployment structure..."

          # Create a simple index.html at root if it doesn't exist
          if [ ! -f ".next/index.html" ] && [ -f ".next/server/app/index.html" ]; then
            cp .next/server/app/index.html .next/index.html
          fi

          echo "Build directory size after optimization:"
          du -sh .next || true
          echo "File structure after optimization:"
          find .next -maxdepth 2 -type f | head -20
          echo "‚úÖ Build optimization completed"

      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: umuo-app
          directory: .next
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Output deployment info
        if: success()
        run: |
          echo "üöÄ Deployment completed!"
          echo "üåê Live site: https://umuo-app.pages.dev"

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Build and deployment successful!"
          # Optional: Add notification logic here if needed
        env:
          NOTIFICATION_SERVICE: ${{ secrets.NOTIFICATION_SERVICE }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          # Optional: Add notification logic here if needed
        env:
          NOTIFICATION_SERVICE: ${{ secrets.NOTIFICATION_SERVICE }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
