name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main

permissions:
  contents: read
  deployments: write

concurrency:
  group: "deploy-production"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ steps.setup-node.outputs.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-${{ steps.setup-node.outputs.node-version }}-
            ${{ runner.os }}-pnpm-

      - name: Setup Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.ts', '**/*.tsx', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "üîí Running security audit..."
          pnpm audit --audit-level high
          echo "‚úÖ Security audit completed"

      - name: Build application
        run: pnpm build
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}

      - name: Optimize build for Cloudflare Pages
        run: |
          echo "üîß Optimizing build for Cloudflare Pages..."
          echo "Build directory size before optimization:"
          du -sh .next || true

          # Copy server-rendered HTML files to root (for Next.js App Router)
          echo "üìÅ Copying server-rendered files..."
          cp -r .next/server/app/* .next/ 2>/dev/null || true

          # Create correct static asset structure for Next.js
          echo "üìÅ Setting up static assets..."
          mkdir -p .next/_next/static
          cp -r .next/static/* .next/_next/ 2>/dev/null || true

          # Copy static files from public directory
          echo "üìÅ Copying public files..."
          cp -r public/* .next/ 2>/dev/null || true

          # Copy worker configuration files if they exist
          cp public/_worker.js .next/ 2>/dev/null || true
          cp public/_redirects .next/ 2>/dev/null || true
          cp public/_headers .next/ 2>/dev/null || true

          # Remove large cache files that exceed Cloudflare's size limit
          echo "üóëÔ∏è Removing large cache files..."
          find .next -name "*.pack" -size +20M -delete 2>/dev/null || true
          find .next -name "*.map" -size +5M -delete 2>/dev/null || true
          rm -rf .next/cache 2>/dev/null || true
          rm -f .next/trace 2>/dev/null || true

          # Remove development-only files
          find .next -name "*.hot-update.js" -delete 2>/dev/null || true
          find .next -name "*.hot-update.json" -delete 2>/dev/null || true

          echo "Build directory size after optimization:"
          du -sh .next || true

          echo "‚úÖ Build optimization completed"

      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: umuo-app
          directory: .next
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Output deployment info
        if: success()
        run: |
          echo "üöÄ Deployment completed!"
          echo "üåê Live site: https://umuo-app.pages.dev"

      - name: Notify deployment success
        if: success()
        run: |
          node .github/notify-deploy.js success \
            "${{ steps.deploy.outputs.url }}" \
            "${{ steps.deploy.outputs.id }}"
        env:
          NOTIFICATION_SERVICE: ${{ secrets.NOTIFICATION_SERVICE }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          node .github/notify-deploy.js failure
        env:
          NOTIFICATION_SERVICE: ${{ secrets.NOTIFICATION_SERVICE }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
